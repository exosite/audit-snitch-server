// Code generated by protoc-gen-go.
// source: audit/audit.proto
// DO NOT EDIT!

/*
Package audit is a generated protocol buffer package.

It is generated from these files:
	audit/audit.proto

It has these top-level messages:
	SnitchTimestamp
	ProgramRun
	KeepAlive
	SnitchReport
*/
package audit

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SnitchTimestamp struct {
	Timestamp        *int64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	TimestampFrac    *int64 `protobuf:"varint,2,req,name=timestamp_frac,json=timestampFrac" json:"timestamp_frac,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SnitchTimestamp) Reset()                    { *m = SnitchTimestamp{} }
func (m *SnitchTimestamp) String() string            { return proto.CompactTextString(m) }
func (*SnitchTimestamp) ProtoMessage()               {}
func (*SnitchTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SnitchTimestamp) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *SnitchTimestamp) GetTimestampFrac() int64 {
	if m != nil && m.TimestampFrac != nil {
		return *m.TimestampFrac
	}
	return 0
}

type ProgramRun struct {
	Timestamp *SnitchTimestamp `protobuf:"bytes,1,req,name=timestamp" json:"timestamp,omitempty"`
	Arch      *string          `protobuf:"bytes,2,req,name=arch" json:"arch,omitempty"`
	// This will probably always be 59
	Syscall          *int32   `protobuf:"varint,3,req,name=syscall" json:"syscall,omitempty"`
	Success          *bool    `protobuf:"varint,4,req,name=success" json:"success,omitempty"`
	Exit             *int32   `protobuf:"varint,5,req,name=exit" json:"exit,omitempty"`
	Pid              *int32   `protobuf:"varint,6,req,name=pid" json:"pid,omitempty"`
	Ppid             *int32   `protobuf:"varint,7,req,name=ppid" json:"ppid,omitempty"`
	Uid              *int32   `protobuf:"varint,8,req,name=uid" json:"uid,omitempty"`
	Gid              *int32   `protobuf:"varint,9,req,name=gid" json:"gid,omitempty"`
	Auid             *int32   `protobuf:"varint,10,req,name=auid" json:"auid,omitempty"`
	Euid             *int32   `protobuf:"varint,11,req,name=euid" json:"euid,omitempty"`
	Egid             *int32   `protobuf:"varint,12,req,name=egid" json:"egid,omitempty"`
	Suid             *int32   `protobuf:"varint,13,req,name=suid" json:"suid,omitempty"`
	Sgid             *int32   `protobuf:"varint,14,req,name=sgid" json:"sgid,omitempty"`
	Fsuid            *int32   `protobuf:"varint,15,req,name=fsuid" json:"fsuid,omitempty"`
	Fsgid            *int32   `protobuf:"varint,16,req,name=fsgid" json:"fsgid,omitempty"`
	Tty              *string  `protobuf:"bytes,17,opt,name=tty" json:"tty,omitempty"`
	Comm             *string  `protobuf:"bytes,18,opt,name=comm" json:"comm,omitempty"`
	Exe              *string  `protobuf:"bytes,19,opt,name=exe" json:"exe,omitempty"`
	Key              *string  `protobuf:"bytes,20,opt,name=key" json:"key,omitempty"`
	Subj             *string  `protobuf:"bytes,21,opt,name=subj" json:"subj,omitempty"`
	Args             []string `protobuf:"bytes,22,rep,name=args" json:"args,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ProgramRun) Reset()                    { *m = ProgramRun{} }
func (m *ProgramRun) String() string            { return proto.CompactTextString(m) }
func (*ProgramRun) ProtoMessage()               {}
func (*ProgramRun) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProgramRun) GetTimestamp() *SnitchTimestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ProgramRun) GetArch() string {
	if m != nil && m.Arch != nil {
		return *m.Arch
	}
	return ""
}

func (m *ProgramRun) GetSyscall() int32 {
	if m != nil && m.Syscall != nil {
		return *m.Syscall
	}
	return 0
}

func (m *ProgramRun) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *ProgramRun) GetExit() int32 {
	if m != nil && m.Exit != nil {
		return *m.Exit
	}
	return 0
}

func (m *ProgramRun) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *ProgramRun) GetPpid() int32 {
	if m != nil && m.Ppid != nil {
		return *m.Ppid
	}
	return 0
}

func (m *ProgramRun) GetUid() int32 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *ProgramRun) GetGid() int32 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *ProgramRun) GetAuid() int32 {
	if m != nil && m.Auid != nil {
		return *m.Auid
	}
	return 0
}

func (m *ProgramRun) GetEuid() int32 {
	if m != nil && m.Euid != nil {
		return *m.Euid
	}
	return 0
}

func (m *ProgramRun) GetEgid() int32 {
	if m != nil && m.Egid != nil {
		return *m.Egid
	}
	return 0
}

func (m *ProgramRun) GetSuid() int32 {
	if m != nil && m.Suid != nil {
		return *m.Suid
	}
	return 0
}

func (m *ProgramRun) GetSgid() int32 {
	if m != nil && m.Sgid != nil {
		return *m.Sgid
	}
	return 0
}

func (m *ProgramRun) GetFsuid() int32 {
	if m != nil && m.Fsuid != nil {
		return *m.Fsuid
	}
	return 0
}

func (m *ProgramRun) GetFsgid() int32 {
	if m != nil && m.Fsgid != nil {
		return *m.Fsgid
	}
	return 0
}

func (m *ProgramRun) GetTty() string {
	if m != nil && m.Tty != nil {
		return *m.Tty
	}
	return ""
}

func (m *ProgramRun) GetComm() string {
	if m != nil && m.Comm != nil {
		return *m.Comm
	}
	return ""
}

func (m *ProgramRun) GetExe() string {
	if m != nil && m.Exe != nil {
		return *m.Exe
	}
	return ""
}

func (m *ProgramRun) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *ProgramRun) GetSubj() string {
	if m != nil && m.Subj != nil {
		return *m.Subj
	}
	return ""
}

func (m *ProgramRun) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type KeepAlive struct {
	Timestamp        *SnitchTimestamp `protobuf:"bytes,1,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *KeepAlive) Reset()                    { *m = KeepAlive{} }
func (m *KeepAlive) String() string            { return proto.CompactTextString(m) }
func (*KeepAlive) ProtoMessage()               {}
func (*KeepAlive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeepAlive) GetTimestamp() *SnitchTimestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// message_type determines content of payload:
// 0 = error report (UTF-8 encoded text)
// 1 = ProgramRun message
// 2 = KeepAlive message
type SnitchReport struct {
	MessageType      *int32 `protobuf:"varint,1,req,name=message_type,json=messageType" json:"message_type,omitempty"`
	Payload          []byte `protobuf:"bytes,2,req,name=payload" json:"payload,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SnitchReport) Reset()                    { *m = SnitchReport{} }
func (m *SnitchReport) String() string            { return proto.CompactTextString(m) }
func (*SnitchReport) ProtoMessage()               {}
func (*SnitchReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SnitchReport) GetMessageType() int32 {
	if m != nil && m.MessageType != nil {
		return *m.MessageType
	}
	return 0
}

func (m *SnitchReport) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*SnitchTimestamp)(nil), "SnitchTimestamp")
	proto.RegisterType((*ProgramRun)(nil), "ProgramRun")
	proto.RegisterType((*KeepAlive)(nil), "KeepAlive")
	proto.RegisterType((*SnitchReport)(nil), "SnitchReport")
}

func init() { proto.RegisterFile("audit/audit.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xb5, 0xc9, 0x86, 0xdd, 0xb8, 0xd9, 0xdd, 0xae, 0x29, 0xc8, 0x07, 0x0e, 0x21, 0x12,
	0x52, 0x4e, 0x45, 0xe2, 0xca, 0x89, 0x0b, 0x97, 0x5e, 0x90, 0xa9, 0xb8, 0x56, 0xc6, 0x99, 0xa6,
	0xa6, 0x49, 0x63, 0xc5, 0x0e, 0x6a, 0xde, 0x97, 0x07, 0x41, 0xe3, 0x49, 0x0a, 0xea, 0x6d, 0x2f,
	0xd5, 0x3f, 0x5f, 0xbe, 0x99, 0xb1, 0x34, 0x65, 0xcf, 0x6a, 0xa8, 0x8c, 0xff, 0x18, 0x7e, 0xd7,
	0xb6, 0xef, 0x7c, 0x57, 0xfc, 0x60, 0x4f, 0xdf, 0x4f, 0xc6, 0xeb, 0xc3, 0xd6, 0xb4, 0xe0, 0xbc,
	0x6a, 0x2d, 0x7f, 0xc7, 0x52, 0x3f, 0x17, 0xe2, 0x26, 0x8f, 0xca, 0x58, 0xfe, 0x03, 0xfc, 0x03,
	0x7b, 0xbc, 0x14, 0xbb, 0x7d, 0xaf, 0xb4, 0x88, 0x82, 0xf2, 0x70, 0xa1, 0x5f, 0x7b, 0xa5, 0x8b,
	0x3f, 0x31, 0x63, 0xdf, 0xfa, 0xae, 0xee, 0x55, 0x2b, 0x87, 0x13, 0x5f, 0x5f, 0xcf, 0x5c, 0x7c,
	0x5a, 0xae, 0xaf, 0x16, 0xff, 0xbf, 0x85, 0xb3, 0x5b, 0xd5, 0xeb, 0x43, 0x98, 0x9d, 0xca, 0x90,
	0xb9, 0x60, 0x77, 0x6e, 0x74, 0x5a, 0x35, 0x8d, 0x88, 0xf3, 0xa8, 0x4c, 0xe4, 0x5c, 0x86, 0x2f,
	0x83, 0xd6, 0xe0, 0x9c, 0xb8, 0xcd, 0xa3, 0xf2, 0x5e, 0xce, 0x25, 0xce, 0x81, 0xb3, 0xf1, 0x22,
	0x09, 0x0d, 0x21, 0xf3, 0x25, 0x8b, 0xad, 0xa9, 0xc4, 0xab, 0x80, 0x30, 0xa2, 0x65, 0x11, 0xdd,
	0x91, 0x85, 0x19, 0xad, 0xc1, 0x54, 0xe2, 0x9e, 0xac, 0x81, 0x48, 0x6d, 0x2a, 0x91, 0x12, 0xa9,
	0xa9, 0x4f, 0xa1, 0xc4, 0xa8, 0x0f, 0x73, 0xd8, 0x88, 0x6c, 0x31, 0x6d, 0x9c, 0x19, 0xb6, 0x66,
	0x13, 0x9b, 0x7a, 0x1d, 0x7a, 0x0f, 0xc4, 0xdc, 0xe4, 0x39, 0xf4, 0x1e, 0x27, 0x86, 0xde, 0x8a,
	0x25, 0xfb, 0x20, 0x3e, 0x05, 0x48, 0x05, 0x51, 0x54, 0x97, 0x33, 0xad, 0xe9, 0x85, 0xde, 0x8f,
	0xe2, 0x39, 0xbf, 0x29, 0x53, 0x89, 0x11, 0x27, 0xea, 0xae, 0x6d, 0x05, 0x0f, 0x28, 0x64, 0xb4,
	0xe0, 0x0c, 0xe2, 0x35, 0x59, 0x70, 0x06, 0x24, 0x47, 0x18, 0xc5, 0x8a, 0xc8, 0x11, 0x46, 0x7a,
	0xdd, 0xcf, 0x5f, 0xe2, 0x0d, 0xf5, 0x61, 0xa6, 0x9b, 0xd4, 0x4e, 0xbc, 0xcd, 0x63, 0xba, 0x49,
	0xed, 0x8a, 0xcf, 0x2c, 0xdd, 0x00, 0xd8, 0x2f, 0x8d, 0xf9, 0x0d, 0x2f, 0x3d, 0x72, 0xb1, 0x61,
	0x19, 0x7d, 0x95, 0x60, 0xbb, 0xde, 0xf3, 0xf7, 0x2c, 0x6b, 0xc1, 0x39, 0x55, 0xc3, 0xce, 0x8f,
	0x16, 0xc2, 0x88, 0x44, 0x2e, 0x26, 0xb6, 0x1d, 0x2d, 0xe0, 0xa5, 0xad, 0x1a, 0x9b, 0x4e, 0x55,
	0xe1, 0xaf, 0x91, 0xc9, 0xb9, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xfb, 0x2c, 0x4f, 0xdc,
	0x02, 0x00, 0x00,
}
